### Main config ###
swagger: "2.0"
info:
  title: "SoPekocko API"
  description: "List of all routes availables for the API"
  version: "1.0"
produces: ["application/json"]

### Components ###
components:
  securitySchemes:
    bearerAuth:           # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
  schemas:
    User:
      type: object
      properties:
        email:
          type: string
          description: The user email.
          example: "john.doe@mail.tld"
        password:
          type: string
          description: The user password.
          example: "1234"
  
    SaucePost:
      type: object
      properties:
        userId:
          type: integer
          description: "The owner user id"
        name:
          type: string
          description: "The sauce name"
        manufacturer:
          type: string
          description: "The sauce manufacturer"
        description:
          type: string
          description: "The sauce description"
        mainPepper:
          type: string
          description: "The sauce main pepper"
        imageUrl:
          type: string
          description: "The sauce image URL"
        heat:
          type: integer
          description: The sauce heat
    SauceGet:
      type: object
      properties:
        userId:
          type: integer
          description: "The owner user id"
        name:
          type: string
          description: "The sauce name"
        manufacturer:
          type: string
          description: "The sauce manufacturer"
        description:
          type: string
          description: "The sauce description"
        mainPepper:
          type: string
          description: "The sauce main pepper"
        imageUrl:
          type: string
          description: "The sauce image URL"
        heat:
          type: integer
          description: The sauce heat
        likes:
          type: integer
          description: The number of likes
        dislikes:
          type: integer
          description: The number of dislikes
        usersLiked:
          type: array
          description: Array of users liked
          items:
            type: string
            description: User ID
        usersDisliked:
          type: array
          description: Array of users disliked
          items:
            type: string
            description: User ID
      

paths:
  ### USERS ###
  # Signup
  /api/auth/signup:
    post:
      summary: "Create a user"
      description: "Create a new user and return a message"
      tags: ["Users"]
      consumes:
        - application/json
      parameters:
        - in: body
          name: 
          description: "The user to create"
          schema:
            $ref: '#/components/schemas/User'

      responses:
        201:
          description: 'A message object'
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Votre compte a bien été créé."
        401:
          description: 'An error object'
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Error message"
        500:
          description: "Unexpected error"

  # Login
  /api/auth/login:
    post:
      summary: "Login a user"
      description: "Return User object with userId and auth token"
      tags: ["Users"]
      parameters:
        - in: body
          name: 
          description: "The user to login"
          schema:
            $ref: '#/components/schemas/User'
      responses:
        200:
          description: 'An object with user ID and auth token'
          schema:
            type: object
            properties:
              userId:
                type: string
                example: "324567UJYGBFDVSTDFYGJ"
              token:
                type: string
                example: "EFRGHJKTR345678UYTHGFD"
        401:
          description: 'An error object'
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Les identifiants fournis ne correspondent pas."
        500:
          description: "Unexpected error"

  ### SAUCES ###
  /api/sauces:
    # List
    get:
      summary: "List all Sauces"
      description: "Return an array of all Sauces object"
      tags: ["Sauces"]
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Return an array with each sauces"
          schema:
            type: array
            items:
              $ref: '#/components/schemas/SauceGet'

        401:
          description: 'An error object'
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Aucune sauce n'est disponible"
    # Create
    post:
      summary: "Create Sauce"
      description: "Create a new sauce"
      tags: ["Sauces"]
      security:
        - bearerAuth: []
      parameters:
        - in: body
          name: sauce
          description: "The Sauce object"
          schema:
            $ref: '#/components/schemas/SaucePost'
      responses:
        201:
          description: "A message object"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "La sauce a bien été ajoutée."

        400:
          description: 'An error object'
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Error message"
        500:
          description: 'Unexpected error'
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Error message"
  # Get specific sauce
  /api/sauces/{id}:
    get:
      summary: "Get specific Sauce"
      description: "Get a Sauce by id"
      tags: ["Sauces"]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          description: The sauce ID
          in: path
          required: true
          type: integer
          example: 60e6d87e80ef5f71eaa28a2a
      responses:
        200:
          description: "A Sauce object"
          schema:
            $ref: '#/components/schemas/SauceGet'

        404:
          description: 'An error object'
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Cette sauce n'exsite pas."
        500:
          description: 'Unexpected error'
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Error message"